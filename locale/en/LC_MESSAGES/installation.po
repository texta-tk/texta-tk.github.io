# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 TEXTA
# This file is distributed under the same license as the TEXTA Toolkit
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TEXTA Toolkit 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-17 12:20+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.1\n"

#: ../../source/installation.rst:1
msgid ""
"`EN <https://docs.texta.ee/installation.html>`_ `ET "
"<https://docs.texta.ee/et/installation.html>`_"
msgstr ""

#: ../../source/installation.rst:7
msgid "Installation"
msgstr ""

#: ../../source/installation.rst:10
msgid "Installation Using Docker (recommended)"
msgstr ""

#: ../../source/installation.rst:14
msgid ""
"Currently all installation examples for system dependencies are only "
"shown for Debian-based systems."
msgstr ""

#: ../../source/installation.rst:17
msgid "Install Docker"
msgstr ""

#: ../../source/installation.rst:19
msgid ""
"The easiest way to run TEXTA Toolkit is to use prebuilt Docker images "
"from TEXTA registries. For doing so, one needs to install *Docker* and "
"*docker-compose*:"
msgstr ""

#: ../../source/installation.rst:26
msgid ""
"To run :ref:`Elasticsearch <elasticsearch>` in Docker, one needs to "
"increase maximum map count parameter for virtual memory:"
msgstr ""

#: ../../source/installation.rst:33
msgid "Configure docker-compose"
msgstr ""

#: ../../source/installation.rst:35
msgid ""
"The ecosystem is built using *docker-compose*. This is all defined in a "
"file called **docker-compose.yaml**. To successfully run TEXTA Toolkit "
"one needs to define following services:"
msgstr ""

#: ../../source/installation.rst:38
msgid ""
":ref:`Elasticsearch <elasticsearch>` for storing the documents (one can "
"also run it without Docker)"
msgstr ""

#: ../../source/installation.rst:40
msgid ""
"Redis for managing message queues in TK (one can also run it without "
"Docker)"
msgstr ""

#: ../../source/installation.rst:42
msgid ""
"MySQL or Postgres for storing user and :ref:`project <project_concept>` "
"data (can also be run without Docker)"
msgstr ""

#: ../../source/installation.rst:44
msgid "TEXTA Toolkit RESTful API & GUI: docker.texta.ee/texta/texta-rest:latest"
msgstr ""

#: ../../source/installation.rst:46
msgid ""
"For executing aforementioned services one needs to have preconfigured "
"**docker-compose.yaml** file:"
msgstr ""

#: ../../source/installation.rst:50
msgid ""
"The compose file is used in combination with **env** file located in the "
"same directory as *docker-compose.yaml* containing environment variables "
"needed for operating TEXTA Toolkit:"
msgstr ""

#: ../../source/installation.rst:55
msgid "Run TEXTA Toolkit"
msgstr ""

#: ../../source/installation.rst:58
msgid ""
"Before running TEXTA Toolkit, one should have 2 files in current working "
"directory:"
msgstr ""

#: ../../source/installation.rst:60
msgid "docker-compose.yaml"
msgstr ""

#: ../../source/installation.rst:62
msgid "env"
msgstr ""

#: ../../source/installation.rst:64
msgid ""
"With the **docker-compose.yaml** and **env** files present and accounted "
"for, pull the images and start the services by executing the following "
"commands in the same directory with **docker-compose.yaml** and **env**:"
msgstr ""

#: ../../source/installation.rst:71
msgid "For running in detached mode, use the *-d* flag:"
msgstr ""

#: ../../source/installation.rst:78
msgid "TEXTA Toolkit's dockerized version comes with a default superuser account:"
msgstr ""

#: ../../source/installation.rst:80 ../../source/installation.rst:159
msgid "**user:** admin"
msgstr ""

#: ../../source/installation.rst:82 ../../source/installation.rst:161
msgid "**password:** 1234"
msgstr ""

#: ../../source/installation.rst:84
msgid "When running, TEXTA Toolkit's GUI should be available at:"
msgstr ""

#: ../../source/installation.rst:86
msgid "http://localhost"
msgstr ""

#: ../../source/installation.rst:88
msgid "and API at:"
msgstr ""

#: ../../source/installation.rst:90
msgid "http://localhost/api/v1/"
msgstr ""

#: ../../source/installation.rst:92
msgid "For stopping the services:"
msgstr ""

#: ../../source/installation.rst:100
msgid "Installation for Development"
msgstr ""

#: ../../source/installation.rst:102
msgid ""
"If you want to develop TEXTA Toolkit, want more control over how you run "
"it, or seriously dislike Docker, it is also possible to install Toolkit "
"using Anaconda (or Miniconda as shown in following examples)."
msgstr ""

#: ../../source/installation.rst:105
msgid "Install Miniconda"
msgstr ""

#: ../../source/installation.rst:107
msgid ""
"First one needs to download and install Miniconda to manage Python "
"environments. Miniconda is chosen over Anaconda because it's smaller in "
"size, but Toolkit works well with both."
msgstr ""

#: ../../source/installation.rst:115
msgid "Also, let's permanently put Conda binaries to **PATH** variable:"
msgstr ""

#: ../../source/installation.rst:122
msgid "Clone the Repository"
msgstr ""

#: ../../source/installation.rst:124
msgid "Now, let's clone the repository and move to **texta-rest** direcory:"
msgstr ""

#: ../../source/installation.rst:132
msgid "Build the Environment"
msgstr ""

#: ../../source/installation.rst:134
msgid ""
"Now that **environment.yaml** file from the texta-rest repository is "
"present, let's use it to build the environment. After the environment is "
"built, let's activate it:"
msgstr ""

#: ../../source/installation.rst:143
msgid "Migrate & Run Toolkit"
msgstr ""

#: ../../source/installation.rst:145
msgid ""
"After the environment has been created and activated, let's prepare the "
"database:"
msgstr ""

#: ../../source/installation.rst:151
msgid ""
"Running the **migrate.py** script will prepare Django migrations and "
"execute them. It is necessary to run the script every time the source "
"code changes because Toolkit's data model might have changed as well. It "
"is also required to run the script before using Toolkit for the first "
"time to create both superuser account and database used to store the data"
" model."
msgstr ""

#: ../../source/installation.rst:157
msgid ""
"Running **migrate.py** will also create a default superuser account with "
"following credentials:"
msgstr ""

#: ../../source/installation.rst:163
msgid "Finally let's run the development server:"
msgstr ""

#: ../../source/installation.rst:169
msgid ""
"And in another terminal run the Celery worker responsible for "
"asynchronous tasks:"
msgstr ""

#: ../../source/installation.rst:176
msgid "Browsable API"
msgstr ""

#: ../../source/installation.rst:178
msgid "http://localhost:8000/api/v1/"
msgstr ""

#: ../../source/installation.rst:180
msgid "TODO"
msgstr ""

#: ../../source/installation.rst:185
msgid "API Reference"
msgstr ""

#: ../../source/installation.rst:187
msgid "Reference for Toolkit API is available when running the Toolkit:"
msgstr ""

#: ../../source/installation.rst:189
msgid "http://localhost:8000/api/v1/swagger/"
msgstr ""

#: ../../source/installation.rst:191
msgid "http://localhost:8000/api/v1/redoc/"
msgstr ""

#~ msgid ""
#~ "To run Elasticsearch in Docker, we "
#~ "need to increase maximum map count "
#~ "parameter for virtual memory:"
#~ msgstr ""

#~ msgid ""
#~ "Elasticsearch for storing the documents "
#~ "(one can also run it without "
#~ "Docker)"
#~ msgstr ""

#~ msgid ""
#~ "MySQL or Postgres for storing user "
#~ "and project data (can also be run"
#~ " without Docker)"
#~ msgstr ""

#~ msgid ""
#~ "To run :ref:`Elasticsearch <elasticsearch>` in"
#~ " Docker, we need to increase maximum"
#~ " map count parameter for virtual "
#~ "memory:"
#~ msgstr ""

#~ msgid ""
#~ "We are using *docker-compose* to "
#~ "build an ecosystem of services to "
#~ "support our needs. This is all "
#~ "defined in a file called **docker-"
#~ "compose.yaml**. To successfully run TEXTA "
#~ "Toolkit we need to define following "
#~ "services:"
#~ msgstr ""

#~ msgid ""
#~ "TEXTA Toolkit RESTful API for backend:"
#~ " docker.texta.ee/texta/texta-rest:latest"
#~ msgstr ""

#~ msgid ""
#~ "For executing aforementioned services we "
#~ "have preconfigured an example **docker-"
#~ "compose.yaml** file:"
#~ msgstr ""

#~ msgid ""
#~ "Before running TEXTA Toolkit, we should"
#~ " have 2 files in our current "
#~ "working directory:"
#~ msgstr ""

#~ msgid ""
#~ "With the **docker-compose.yaml** and "
#~ "**env** files present and accounted for,"
#~ " let's pull the images and start "
#~ "the services by executing the following"
#~ " commands in the same directory with"
#~ " **docker-compose.yaml** and **env**:"
#~ msgstr ""

#~ msgid ""
#~ "First we need to download and "
#~ "install Miniconda to manage Python "
#~ "environments. We choose Miniconda over "
#~ "Anaconda because it's smaller in size,"
#~ " but Toolkit works well with both."
#~ msgstr ""

#~ msgid ""
#~ "Now that we have **environment.yaml** "
#~ "file from the texta-rest repository, "
#~ "let's use it to build the "
#~ "environment. After the environment is "
#~ "built, let's activate it:"
#~ msgstr ""

#~ msgid ""
#~ "The easiest way to run TEXTA "
#~ "Toolkit is to use our prebuilt "
#~ "Docker images from our registries. For"
#~ " doing so, one needs to install "
#~ "*Docker* and *docker-compose*:"
#~ msgstr ""

#~ msgid ""
#~ "Before running TEXTA Toolkit, one should"
#~ " have 2 files in our current "
#~ "working directory:"
#~ msgstr ""

